---
import { ClientRouter } from "astro:transitions";
import "../styles/global.css";
import { getSeasonalColors } from "../utils/seasonalGradient";
import { calculateSunPosition, formatTime } from "../utils/timeUtils";
import SeasonDebugger from "../components/SeasonDebugger.astro";
import SeasonSlider from "../components/SeasonSlider.astro";
import GradientBackground from "../components/GradientBackground.astro";
import NameWithSun from "../components/NameWithSun.astro";
import TimeDebugger from "../components/TimeDebugger.astro";

const pathname = Astro.url.pathname;
const isDev = import.meta.env.DEV;
const { startColor, endColor } = getSeasonalColors();
const now = new Date();
const currentHour = now.getHours() + now.getMinutes() / 60;
const currentDay = Math.floor(
  (now.getTime() - new Date(now.getFullYear(), 0, 0).getTime()) /
    (1000 * 60 * 60 * 24),
);

const { sunAngle, shadowX, shadowY, shadowOpacity } =
  calculateSunPosition(currentHour);

// Fetch weather data with error handling
let temperature = null;
let description = null;

try {
  const WEATHER_API_KEY = import.meta.env.PUBLIC_WEATHER_API_KEY;
  if (WEATHER_API_KEY) {
    const weatherResponse = await fetch(
      `https://api.openweathermap.org/data/2.5/weather?q=Kansas City,US&units=imperial&appid=${WEATHER_API_KEY}`,
    );
    const weatherData = await weatherResponse.json();

    if (weatherData.main && weatherData.weather) {
      temperature = Math.round(weatherData.main.temp);
      description = weatherData.weather[0].description;
    }
  }
} catch (error) {
  console.error("Failed to fetch weather:", error);
}
---

<!doctype html>
<html
  lang="en"
  style={`
    --startColor: ${startColor};
    --endColor: ${endColor};
    --shadowX: ${shadowX}px;
    --shadowY: ${shadowY}px;
    --shadowOpacity: ${shadowOpacity};
    --sunAngle: ${sunAngle};
  `}
>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="favicon.png" type="image/png" />
    <title>mzb.dev</title>
    <ClientRouter />
  </head>
  <body>
    <GradientBackground />
    <div class="layout-container">
      <nav class="fixed-nav">
        <NameWithSun />
        <div class="subheading">
          <div>Software Engineer in Kansas City</div>
        </div>
        <div class="nav-links">
          <a href="/" class:list={["nav-link", { active: pathname === "/" }]}>
            About
          </a>
          <a
            href="/writings"
            class:list={["nav-link", { active: pathname === "/writings" }]}
          >
            Writings
          </a>
          <a
            href="/work"
            class:list={["nav-link", { active: pathname === "/work" }]}
          >
            Work History
          </a>
          <a
            href="/photographs"
            class:list={["nav-link", { active: pathname === "/photographs" }]}
          >
            Photographs
          </a>
          <a class="nav-link" href="Miller_Bath_Resume_Aug2023.pdf">Resume</a>
          <a class="nav-link" href="https://www.linkedin.com/in/~miller"
            >LinkedIn</a
          >
        </div>
      </nav>
      <main class="content">
        <slot />
      </main>
    </div>
    <div class="info-container">
      <div class="day-counter">
        Day {currentDay}
        <div class="time-display">{formatTime(now)}</div>
      </div>
      {
        temperature !== null && description !== null && (
          <div class="weather-info">
            {temperature}°F • {description}
          </div>
        )
      }
    </div>
    {
      isDev && (
        <div class="season-debugger">
          <SeasonSlider currentDay={currentDay} />
          <TimeDebugger currentHour={currentHour} />
        </div>
      )
    }
    {isDev && <SeasonDebugger />}
  </body>
</html>

<style is:global>
  html {
    background: linear-gradient(
        135deg,
        var(--startColor) 0%,
        var(--endColor) 100%
      )
      fixed;
    transition: background 0.3s ease;
  }
</style>

<style>
  .season-debugger {
    position: fixed;
    bottom: 50px;
    right: 20px;
    background: rgba(255, 255, 255, 0.9);
    padding: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 10px;
    z-index: 1000;
  }

  .debug-label {
    font-size: 14px;
    color: #666;
  }

  #season-debug {
    width: 200px;
  }

  .info-container {
    position: fixed;
    bottom: 20px;
    left: 20px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    z-index: 1000;
  }

  .day-counter,
  .weather-info {
    font-size: 14px;
    color: rgba(35, 31, 32, 0.6);
    padding: 5px 10px;
    border-radius: 4px;
  }

  .time-display {
    font-size: 12px;
    margin-top: 2px;
    opacity: 0.8;
  }

  .name {
    text-shadow: var(--shadowX) var(--shadowY) 4px
      rgba(0, 0, 0, var(--shadowOpacity, 0.25));
    transition: text-shadow 0.3s ease;
  }

  .debug-control {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 5px;
  }

  .debug-control:last-child {
    margin-bottom: 0;
  }

  .name-container {
    position: relative;
    display: inline-block;
  }

  .sun {
    position: absolute;
    width: 12px;
    height: 12px;
    background: #ff7b4d; /* Softer orange-red core */
    border-radius: 50%;
    box-shadow: 0 0 12px rgba(255, 90, 60, 0.5); /* More muted glow */
    transform-origin: 50% 50%;
    opacity: var(--shadowOpacity);
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) rotate(calc(var(--sunAngle) * 1deg))
      translateY(-40px);
  }

  @keyframes glow {
    0%,
    100% {
      box-shadow: 0 0 12px rgba(255, 90, 60, 0.5);
    }
    50% {
      box-shadow: 0 0 18px rgba(255, 90, 60, 0.7); /* Softer pulsing glow */
    }
  }

  .sun::after {
    content: "";
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: radial-gradient(
      circle,
      rgba(255, 123, 77, 0.3),
      /* Softer inner glow */ transparent 70%
    );
    border-radius: 50%;
    animation: glow 3s infinite;
  }
</style>
