---
import { ClientRouter } from "astro:transitions";
import "../styles/global.css";
import { getSeasonalColors } from "../utils/seasonalGradient";
import { calculateSunPosition, formatTime } from "../utils/timeUtils";
import { fetchWeatherData } from "../utils/weatherUtils";
import type { WeatherData, TimeInfo } from "../types";

import Navigation from "../components/Navigation.astro";
import InfoContainer from "../components/InfoContainer.astro";
import GradientBackground from "../components/GradientBackground.astro";
import { SpeedInsights } from "@vercel/speed-insights/next";

// Page setup
const pathname = Astro.url.pathname;

// Get colors and calculate time
const { startColor, endColor } = getSeasonalColors();
const now = new Date();
const currentHour = now.getHours() + now.getMinutes() / 60;
const currentDay = Math.floor(
  (now.getTime() - new Date(now.getFullYear(), 0, 0).getTime()) /
    (1000 * 60 * 60 * 24),
);

const timeInfo = {
  currentHour,
  currentDay,
  formattedTime: formatTime(now),
};

// Calculate sun position and fetch weather
const sunPosition = calculateSunPosition(timeInfo.currentHour);
const weatherData = await fetchWeatherData(import.meta.env.WEATHER_API_KEY);

const { sunAngle, shadowX, shadowY, shadowOpacity } = sunPosition;
---

<!doctype html>
<html
  lang="en"
  style={`
    --startColor: ${startColor};
    --endColor: ${endColor};
    --shadowX: ${shadowX}px;
    --shadowY: ${shadowY}px;
    --shadowOpacity: ${shadowOpacity};
    --sunAngle: ${sunAngle}deg;
  `}
>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="favicon.png" type="image/png" />
    <title>mzb.dev</title>
    <ClientRouter />
    <SpeedInsights />
  </head>
  <body>
    <GradientBackground />
    <div class="layout-container">
      <Navigation
        pathname={pathname}
        sunAngle={sunAngle}
        shadowX={shadowX}
        shadowY={shadowY}
        shadowOpacity={shadowOpacity}
      />
      <main class="content">
        <slot />
      </main>
    </div>
    <InfoContainer timeInfo={timeInfo} weatherData={weatherData} />
  </body>
</html>

<style is:global>
  html {
    background: linear-gradient(
        135deg,
        var(--startColor) 0%,
        var(--endColor) 100%
      )
      fixed;
    transition: background 0.3s ease;
  }
</style>

<style>
  .info-container {
    position: fixed;
    bottom: 20px;
    left: 20px;
    display: flex;
    flex-direction: column;
    gap: 5px;
    z-index: 1000;
  }

  .day-counter,
  .weather-info {
    font-size: 14px;
    color: rgba(35, 31, 32, 0.6);
    padding: 5px 10px;
    border-radius: 4px;
  }

  .time-display {
    font-size: 12px;
    margin-top: 2px;
    opacity: 0.8;
  }

  .name {
    text-shadow: var(--shadowX) var(--shadowY) 4px
      rgba(0, 0, 0, calc(var(--shadowOpacity) * 0.2));
    transition: text-shadow 0.3s ease;
  }

  .name-container {
    position: relative;
    display: inline-block;
  }

  .sun {
    position: absolute;
    width: 8px;
    height: 8px;
    background: rgba(255, 123, 77, 0.6);
    border-radius: 50%;
    box-shadow: 0 0 6px rgba(255, 90, 60, 0.2);
    transform-origin: 50% 50%;
    opacity: calc(var(--shadowOpacity) * 0.5);
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) rotate(calc(var(--sunAngle) * 1deg))
      translateY(-40px);
  }

  .sun::after {
    content: "";
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: radial-gradient(
      circle,
      rgba(255, 123, 77, 0.1),
      transparent 70%
    );
    border-radius: 50%;
    animation: glow 5s infinite;
  }

  @keyframes glow {
    0%,
    100% {
      box-shadow: 0 0 6px rgba(255, 90, 60, 0.2);
    }
    50% {
      box-shadow: 0 0 8px rgba(255, 90, 60, 0.3);
    }
  }
</style>
